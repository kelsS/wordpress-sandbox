version: '2'

services:
  db:
    container_name:  wp-sb-database
    image: mariadb  # Pull mysql image from Docker Hub
    ports:  # Set up ports exposed for other containers to connect to
      - "3306:3306"
    volumes:
      - ./dep/mysql:/docker-entrypoint-initdb.d
    environment:  # Set up mysql database name and password
      MYSQL_ROOT_PASSWORD: wordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
  wordpress:
    image: wordpress:4.9.8-php7.2-apache
    container_name: wordpress-sb-cms 
    depends_on:
      - db
    ports:
      - "80:80"
    volumes: # Mount relative path source folder on host to absolute path destination folder on docker container
      - ./theme:/var/www/html/wp-content/themes/
      - ./dep/plugins:/var/www/html/wp-content/plugins
      - ./dep/uploads:/var/www/html/wp-content/uploads
      - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
    links: 
      - db
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_PASSWORD: wordpress
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin-sb
    depends_on: 
      - db
    restart: always
    ports:
      - "8080:80"
    environment:
     - PMA_ARBITRARY=1

#  You can now browse to http://localhost:80/ and see your WordPress installation
# PHPMYADMIN URL: http://localhost:8080
# See Theme CSS Compiling http://localhost:3001/
#  If you want to connect to mysql, just be sure to use the address 127.0.0.1 and the port 8080
# https://medium.com/@tatemz/local-wordpress-development-with-docker-3-easy-steps-a7c375366b9

# Command to backup database from database container
# docker exec landingpagetool_my-wpdb_1 mysqldump -u root --password=VisionPoint!mysql wp_landingpagetool > wp_landingpagetool_backup.sql